// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	HelloReq
	HelloRes
*/
package hello

import proto "github.com/plimble/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	micro "github.com/plimble/micro"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" gorethink:"name"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloRes struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty" gorethink:"result"`
}

func (m *HelloRes) Reset()                    { *m = HelloRes{} }
func (m *HelloRes) String() string            { return proto.CompactTextString(m) }
func (*HelloRes) ProtoMessage()               {}
func (*HelloRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HelloReq)(nil), "HelloReq")
	proto.RegisterType((*HelloRes)(nil), "HelloRes")
}

// Reference imports to suppress errors if they are not otherwise used.

// Client API for HelloService service

type HelloServiceClient interface {
	HelloRequest(req *HelloReq) (*HelloRes, error)
	HelloPublish(req *HelloReq) error
}

type helloServiceClient struct {
	c      micro.Client
	prefix string
}

func NewHelloServiceClient(prefix string, c micro.Client) HelloServiceClient {
	return &helloServiceClient{
		c:      c,
		prefix: prefix,
	}
}

func (c *helloServiceClient) HelloRequest(req *HelloReq) (*HelloRes, error) {
	res := new(HelloRes)
	err := c.c.Request(c.prefix+".Hello", req, res, micro.DefaultTimeout)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func (c *helloServiceClient) HelloPublish(req *HelloReq) error {
	return c.c.Publish(c.prefix+".Hello", req)
}

// Server API for HelloService service

type HelloHandler func(*micro.Context, *HelloReq, *HelloRes) error

type HelloServiceQueueSubscribe struct {
	m      *micro.Micro
	prefix string
}

func NewHelloServiceQueueSubscribe(prefix string, m *micro.Micro) *HelloServiceQueueSubscribe {
	return &HelloServiceQueueSubscribe{
		m:      m,
		prefix: prefix,
	}
}

func (dq *HelloServiceQueueSubscribe) Hello(h HelloHandler) {
	subj := dq.prefix + ".Hello"
	dq.m.QueueSubscribe(subj, subj, func(ctx *micro.Context) error {
		req := new(HelloReq)
		if err := ctx.Decode(ctx.Data, req); err != nil {
			return err
		}

		res := new(HelloRes)
		if err := h(ctx, req, res); err != nil {
			return err
		}

		if ctx.Reply != "" {
			ctx.Publish(ctx.Reply, res)
		}

		return nil
	})
}

type HelloServiceSubscribe struct {
	m      *micro.Micro
	prefix string
}

func NewHelloServiceSubscribe(prefix string, m *micro.Micro) *HelloServiceSubscribe {
	return &HelloServiceSubscribe{
		m:      m,
		prefix: prefix,
	}
}

func (ds *HelloServiceSubscribe) Hello(h HelloHandler) {
	subj := ds.prefix + ".Hello"
	ds.m.Subscribe(subj, func(ctx *micro.Context) error {
		req := new(HelloReq)
		if err := ctx.Decode(ctx.Data, req); err != nil {
			return err
		}

		res := new(HelloRes)
		if err := h(ctx, req, res); err != nil {
			return err
		}

		if ctx.Reply != "" {
			ctx.Publish(ctx.Reply, res)
		}

		return nil
	})
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe3, 0xe2, 0xf0, 0x00, 0x71, 0x83, 0x52,
	0x0b, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x25, 0x25, 0xb8, 0x7c, 0xb1, 0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e,
	0x09, 0x54, 0x05, 0x94, 0x67, 0xa4, 0xcf, 0xc5, 0x03, 0x56, 0x13, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0x24, 0xcf, 0xc5, 0x0a, 0xe6, 0x0b, 0x71, 0xea, 0xc1, 0xcc, 0x96, 0x82, 0x33, 0x8b,
	0x95, 0x18, 0x92, 0xd8, 0xc0, 0x76, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x46, 0x7b,
	0xc0, 0x8a, 0x00, 0x00, 0x00,
}
